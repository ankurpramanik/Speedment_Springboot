package com.ada.speedment.zdb.generated;

import com.ada.speedment.zdb.SpeedmentDbApplication;
import com.ada.speedment.zdb.SpeedmentDbApplicationBuilder;
import com.ada.speedment.zdb.SpeedmentDbApplicationImpl;
import com.ada.speedment.zdb.SpeedmentDbInjectorProxy;
import com.ada.speedment.zdb.training.public_.employee.EmployeeManagerImpl;
import com.ada.speedment.zdb.training.public_.employee.EmployeeSqlAdapter;
import com.ada.speedment.zdb.training.public_.student.StudentManagerImpl;
import com.ada.speedment.zdb.training.public_.student.StudentSqlAdapter;
import com.ada.speedment.zdb.training.public_.studentmarks.StudentMarksManagerImpl;
import com.ada.speedment.zdb.training.public_.studentmarks.StudentMarksSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;
import com.speedment.runtime.connector.postgres.PostgresBundle;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named public.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSpeedmentDbApplicationBuilder extends AbstractApplicationBuilder<SpeedmentDbApplication, SpeedmentDbApplicationBuilder> {
    
    protected GeneratedSpeedmentDbApplicationBuilder() {
        super(SpeedmentDbApplicationImpl.class, GeneratedSpeedmentDbMetadata.class);
        withManager(EmployeeManagerImpl.class);
        withManager(StudentManagerImpl.class);
        withManager(StudentMarksManagerImpl.class);
        withComponent(EmployeeSqlAdapter.class);
        withComponent(StudentSqlAdapter.class);
        withComponent(StudentMarksSqlAdapter.class);
        withBundle(PostgresBundle.class);
        withInjectorProxy(new SpeedmentDbInjectorProxy());
    }
    
    @Override
    public SpeedmentDbApplication build(Injector injector) {
        return injector.getOrThrow(SpeedmentDbApplication.class);
    }
}
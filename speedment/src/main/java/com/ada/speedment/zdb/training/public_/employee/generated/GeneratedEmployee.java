package com.ada.speedment.zdb.training.public_.employee.generated;

import com.ada.speedment.zdb.training.public_.employee.Employee;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.ada.speedment.zdb.training.public_.employee.Employee}-interface
 * representing entities of the {@code Employee}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedEmployee {
    
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getEmpId()} method.
     */
    IntField<Employee, Integer> EMP_ID = IntField.create(
        Identifier.EMP_ID,
        Employee::getEmpId,
        Employee::setEmpId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getEmpFirstName()} method.
     */
    StringField<Employee, String> EMP_FIRST_NAME = StringField.create(
        Identifier.EMP_FIRST_NAME,
        Employee::getEmpFirstName,
        Employee::setEmpFirstName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getEmpLastName()} method.
     */
    StringField<Employee, String> EMP_LAST_NAME = StringField.create(
        Identifier.EMP_LAST_NAME,
        Employee::getEmpLastName,
        Employee::setEmpLastName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getEmpAddress()} method.
     */
    StringField<Employee, String> EMP_ADDRESS = StringField.create(
        Identifier.EMP_ADDRESS,
        Employee::getEmpAddress,
        Employee::setEmpAddress,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getPhoneNo()} method.
     */
    StringField<Employee, String> PHONE_NO = StringField.create(
        Identifier.PHONE_NO,
        Employee::getPhoneNo,
        Employee::setPhoneNo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getEmail()} method.
     */
    StringField<Employee, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        Employee::getEmail,
        Employee::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Employee} field that can be obtained
     * using the {@link Employee#getActive()} method.
     */
    BooleanField<Employee, Boolean> ACTIVE = BooleanField.create(
        Identifier.ACTIVE,
        Employee::getActive,
        Employee::setActive,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the empId of this Employee. The empId field corresponds to the
     * database column Training.public.Employee.EmpID.
     * 
     * @return the empId of this Employee
     */
    int getEmpId();
    
    /**
     * Returns the empFirstName of this Employee. The empFirstName field
     * corresponds to the database column Training.public.Employee.EmpFirstName.
     * 
     * @return the empFirstName of this Employee
     */
    String getEmpFirstName();
    
    /**
     * Returns the empLastName of this Employee. The empLastName field
     * corresponds to the database column Training.public.Employee.EmpLastName.
     * 
     * @return the empLastName of this Employee
     */
    String getEmpLastName();
    
    /**
     * Returns the empAddress of this Employee. The empAddress field corresponds
     * to the database column Training.public.Employee.EmpAddress.
     * 
     * @return the empAddress of this Employee
     */
    String getEmpAddress();
    
    /**
     * Returns the phoneNo of this Employee. The phoneNo field corresponds to
     * the database column Training.public.Employee.PhoneNo.
     * 
     * @return the phoneNo of this Employee
     */
    String getPhoneNo();
    
    /**
     * Returns the email of this Employee. The email field corresponds to the
     * database column Training.public.Employee.Email.
     * 
     * @return the email of this Employee
     */
    String getEmail();
    
    /**
     * Returns the active of this Employee. The active field corresponds to the
     * database column Training.public.Employee.Active.
     * 
     * @return the active of this Employee
     */
    boolean getActive();
    
    /**
     * Sets the empId of this Employee. The empId field corresponds to the
     * database column Training.public.Employee.EmpID.
     * 
     * @param empId to set of this Employee
     * @return      this Employee instance
     */
    Employee setEmpId(int empId);
    
    /**
     * Sets the empFirstName of this Employee. The empFirstName field
     * corresponds to the database column Training.public.Employee.EmpFirstName.
     * 
     * @param empFirstName to set of this Employee
     * @return             this Employee instance
     */
    Employee setEmpFirstName(String empFirstName);
    
    /**
     * Sets the empLastName of this Employee. The empLastName field corresponds
     * to the database column Training.public.Employee.EmpLastName.
     * 
     * @param empLastName to set of this Employee
     * @return            this Employee instance
     */
    Employee setEmpLastName(String empLastName);
    
    /**
     * Sets the empAddress of this Employee. The empAddress field corresponds to
     * the database column Training.public.Employee.EmpAddress.
     * 
     * @param empAddress to set of this Employee
     * @return           this Employee instance
     */
    Employee setEmpAddress(String empAddress);
    
    /**
     * Sets the phoneNo of this Employee. The phoneNo field corresponds to the
     * database column Training.public.Employee.PhoneNo.
     * 
     * @param phoneNo to set of this Employee
     * @return        this Employee instance
     */
    Employee setPhoneNo(String phoneNo);
    
    /**
     * Sets the email of this Employee. The email field corresponds to the
     * database column Training.public.Employee.Email.
     * 
     * @param email to set of this Employee
     * @return      this Employee instance
     */
    Employee setEmail(String email);
    
    /**
     * Sets the active of this Employee. The active field corresponds to the
     * database column Training.public.Employee.Active.
     * 
     * @param active to set of this Employee
     * @return       this Employee instance
     */
    Employee setActive(boolean active);
    
    enum Identifier implements ColumnIdentifier<Employee> {
        
        EMP_ID         ("EmpID"),
        EMP_FIRST_NAME ("EmpFirstName"),
        EMP_LAST_NAME  ("EmpLastName"),
        EMP_ADDRESS    ("EmpAddress"),
        PHONE_NO       ("PhoneNo"),
        EMAIL          ("Email"),
        ACTIVE         ("Active");
        
        private final String columnId;
        private final TableIdentifier<Employee> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Training";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "Employee";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Employee> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}
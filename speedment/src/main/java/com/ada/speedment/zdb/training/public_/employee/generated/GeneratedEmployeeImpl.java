package com.ada.speedment.zdb.training.public_.employee.generated;

import com.ada.speedment.zdb.training.public_.employee.Employee;
import com.speedment.common.annotation.GeneratedCode;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.ada.speedment.zdb.training.public_.employee.Employee}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedEmployeeImpl implements Employee {
    
    private int empId;
    private String empFirstName;
    private String empLastName;
    private String empAddress;
    private String phoneNo;
    private String email;
    private boolean active;
    
    protected GeneratedEmployeeImpl() {}
    
    @Override
    public int getEmpId() {
        return empId;
    }
    
    @Override
    public String getEmpFirstName() {
        return empFirstName;
    }
    
    @Override
    public String getEmpLastName() {
        return empLastName;
    }
    
    @Override
    public String getEmpAddress() {
        return empAddress;
    }
    
    @Override
    public String getPhoneNo() {
        return phoneNo;
    }
    
    @Override
    public String getEmail() {
        return email;
    }
    
    @Override
    public boolean getActive() {
        return active;
    }
    
    @Override
    public Employee setEmpId(int empId) {
        this.empId = empId;
        return this;
    }
    
    @Override
    public Employee setEmpFirstName(String empFirstName) {
        this.empFirstName = empFirstName;
        return this;
    }
    
    @Override
    public Employee setEmpLastName(String empLastName) {
        this.empLastName = empLastName;
        return this;
    }
    
    @Override
    public Employee setEmpAddress(String empAddress) {
        this.empAddress = empAddress;
        return this;
    }
    
    @Override
    public Employee setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
        return this;
    }
    
    @Override
    public Employee setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public Employee setActive(boolean active) {
        this.active = active;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("empId = "        + Objects.toString(getEmpId()));
        sj.add("empFirstName = " + Objects.toString(getEmpFirstName()));
        sj.add("empLastName = "  + Objects.toString(getEmpLastName()));
        sj.add("empAddress = "   + Objects.toString(getEmpAddress()));
        sj.add("phoneNo = "      + Objects.toString(getPhoneNo()));
        sj.add("email = "        + Objects.toString(getEmail()));
        sj.add("active = "       + Objects.toString(getActive()));
        return "EmployeeImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Employee)) { return false; }
        final Employee thatEmployee = (Employee)that;
        if (this.getEmpId() != thatEmployee.getEmpId()) { return false; }
        if (!Objects.equals(this.getEmpFirstName(), thatEmployee.getEmpFirstName())) { return false; }
        if (!Objects.equals(this.getEmpLastName(), thatEmployee.getEmpLastName())) { return false; }
        if (!Objects.equals(this.getEmpAddress(), thatEmployee.getEmpAddress())) { return false; }
        if (!Objects.equals(this.getPhoneNo(), thatEmployee.getPhoneNo())) { return false; }
        if (!Objects.equals(this.getEmail(), thatEmployee.getEmail())) { return false; }
        if (this.getActive() != thatEmployee.getActive()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getEmpId());
        hash = 31 * hash + Objects.hashCode(getEmpFirstName());
        hash = 31 * hash + Objects.hashCode(getEmpLastName());
        hash = 31 * hash + Objects.hashCode(getEmpAddress());
        hash = 31 * hash + Objects.hashCode(getPhoneNo());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Boolean.hashCode(getActive());
        return hash;
    }
}
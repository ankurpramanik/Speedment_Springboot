package com.ada.speedment.zdb.training.public_.student.generated;

import com.ada.speedment.zdb.training.public_.student.Student;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.ada.speedment.zdb.training.public_.student.Student}-interface
 * representing entities of the {@code Student}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStudent {
    
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getStudentId()} method.
     */
    LongField<Student, Long> STUDENT_ID = LongField.create(
        Identifier.STUDENT_ID,
        Student::getStudentId,
        Student::setStudentId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getStudentName()} method.
     */
    StringField<Student, String> STUDENT_NAME = StringField.create(
        Identifier.STUDENT_NAME,
        Student::getStudentName,
        Student::setStudentName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getAddress()} method.
     */
    StringField<Student, String> ADDRESS = StringField.create(
        Identifier.ADDRESS,
        Student::getAddress,
        Student::setAddress,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getGuardianName()} method.
     */
    StringField<Student, String> GUARDIAN_NAME = StringField.create(
        Identifier.GUARDIAN_NAME,
        Student::getGuardianName,
        Student::setGuardianName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getEmail()} method.
     */
    StringField<Student, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        Student::getEmail,
        Student::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getPhoneNo()} method.
     */
    StringField<Student, String> PHONE_NO = StringField.create(
        Identifier.PHONE_NO,
        Student::getPhoneNo,
        Student::setPhoneNo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getActive()} method.
     */
    BooleanField<Student, Boolean> ACTIVE = BooleanField.create(
        Identifier.ACTIVE,
        Student::getActive,
        Student::setActive,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the studentId of this Student. The studentId field corresponds to
     * the database column Training.public.Student.StudentID.
     * 
     * @return the studentId of this Student
     */
    long getStudentId();
    
    /**
     * Returns the studentName of this Student. The studentName field
     * corresponds to the database column Training.public.Student.StudentName.
     * 
     * @return the studentName of this Student
     */
    String getStudentName();
    
    /**
     * Returns the address of this Student. The address field corresponds to the
     * database column Training.public.Student.Address.
     * 
     * @return the address of this Student
     */
    String getAddress();
    
    /**
     * Returns the guardianName of this Student. The guardianName field
     * corresponds to the database column Training.public.Student.GuardianName.
     * 
     * @return the guardianName of this Student
     */
    String getGuardianName();
    
    /**
     * Returns the email of this Student. The email field corresponds to the
     * database column Training.public.Student.Email.
     * 
     * @return the email of this Student
     */
    String getEmail();
    
    /**
     * Returns the phoneNo of this Student. The phoneNo field corresponds to the
     * database column Training.public.Student.PhoneNo.
     * 
     * @return the phoneNo of this Student
     */
    String getPhoneNo();
    
    /**
     * Returns the active of this Student. The active field corresponds to the
     * database column Training.public.Student.active.
     * 
     * @return the active of this Student
     */
    boolean getActive();
    
    /**
     * Sets the studentId of this Student. The studentId field corresponds to
     * the database column Training.public.Student.StudentID.
     * 
     * @param studentId to set of this Student
     * @return          this Student instance
     */
    Student setStudentId(long studentId);
    
    /**
     * Sets the studentName of this Student. The studentName field corresponds
     * to the database column Training.public.Student.StudentName.
     * 
     * @param studentName to set of this Student
     * @return            this Student instance
     */
    Student setStudentName(String studentName);
    
    /**
     * Sets the address of this Student. The address field corresponds to the
     * database column Training.public.Student.Address.
     * 
     * @param address to set of this Student
     * @return        this Student instance
     */
    Student setAddress(String address);
    
    /**
     * Sets the guardianName of this Student. The guardianName field corresponds
     * to the database column Training.public.Student.GuardianName.
     * 
     * @param guardianName to set of this Student
     * @return             this Student instance
     */
    Student setGuardianName(String guardianName);
    
    /**
     * Sets the email of this Student. The email field corresponds to the
     * database column Training.public.Student.Email.
     * 
     * @param email to set of this Student
     * @return      this Student instance
     */
    Student setEmail(String email);
    
    /**
     * Sets the phoneNo of this Student. The phoneNo field corresponds to the
     * database column Training.public.Student.PhoneNo.
     * 
     * @param phoneNo to set of this Student
     * @return        this Student instance
     */
    Student setPhoneNo(String phoneNo);
    
    /**
     * Sets the active of this Student. The active field corresponds to the
     * database column Training.public.Student.active.
     * 
     * @param active to set of this Student
     * @return       this Student instance
     */
    Student setActive(boolean active);
    
    enum Identifier implements ColumnIdentifier<Student> {
        
        STUDENT_ID    ("StudentID"),
        STUDENT_NAME  ("StudentName"),
        ADDRESS       ("Address"),
        GUARDIAN_NAME ("GuardianName"),
        EMAIL         ("Email"),
        PHONE_NO      ("PhoneNo"),
        ACTIVE        ("active");
        
        private final String columnId;
        private final TableIdentifier<Student> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Training";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "Student";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Student> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}
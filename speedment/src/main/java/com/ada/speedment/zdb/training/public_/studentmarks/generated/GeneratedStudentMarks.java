package com.ada.speedment.zdb.training.public_.studentmarks.generated;

import com.ada.speedment.zdb.training.public_.student.Student;
import com.ada.speedment.zdb.training.public_.studentmarks.StudentMarks;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.ada.speedment.zdb.training.public_.studentmarks.StudentMarks}-interface
 * representing entities of the {@code StudentMarks}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStudentMarks {
    
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getMarksId()} method.
     */
    LongField<StudentMarks, Long> MARKS_ID = LongField.create(
        Identifier.MARKS_ID,
        StudentMarks::getMarksId,
        StudentMarks::setMarksId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getStudentId()} method.
     */
    LongForeignKeyField<StudentMarks, Long, Student> STUDENT_ID = LongForeignKeyField.create(
        Identifier.STUDENT_ID,
        StudentMarks::getStudentId,
        StudentMarks::setStudentId,
        Student.STUDENT_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getPhysics()} method.
     */
    LongField<StudentMarks, Long> PHYSICS = LongField.create(
        Identifier.PHYSICS,
        StudentMarks::getPhysics,
        StudentMarks::setPhysics,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getChemistry()} method.
     */
    LongField<StudentMarks, Long> CHEMISTRY = LongField.create(
        Identifier.CHEMISTRY,
        StudentMarks::getChemistry,
        StudentMarks::setChemistry,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getMaths()} method.
     */
    LongField<StudentMarks, Long> MATHS = LongField.create(
        Identifier.MATHS,
        StudentMarks::getMaths,
        StudentMarks::setMaths,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link StudentMarks} field that can be
     * obtained using the {@link StudentMarks#getEnglish()} method.
     */
    LongField<StudentMarks, Long> ENGLISH = LongField.create(
        Identifier.ENGLISH,
        StudentMarks::getEnglish,
        StudentMarks::setEnglish,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the marksId of this StudentMarks. The marksId field corresponds
     * to the database column Training.public.StudentMarks.MarksID.
     * 
     * @return the marksId of this StudentMarks
     */
    long getMarksId();
    
    /**
     * Returns the studentId of this StudentMarks. The studentId field
     * corresponds to the database column
     * Training.public.StudentMarks.StudentID.
     * 
     * @return the studentId of this StudentMarks
     */
    long getStudentId();
    
    /**
     * Returns the physics of this StudentMarks. The physics field corresponds
     * to the database column Training.public.StudentMarks.Physics.
     * 
     * @return the physics of this StudentMarks
     */
    long getPhysics();
    
    /**
     * Returns the chemistry of this StudentMarks. The chemistry field
     * corresponds to the database column
     * Training.public.StudentMarks.Chemistry.
     * 
     * @return the chemistry of this StudentMarks
     */
    long getChemistry();
    
    /**
     * Returns the maths of this StudentMarks. The maths field corresponds to
     * the database column Training.public.StudentMarks.Maths.
     * 
     * @return the maths of this StudentMarks
     */
    long getMaths();
    
    /**
     * Returns the english of this StudentMarks. The english field corresponds
     * to the database column Training.public.StudentMarks.English.
     * 
     * @return the english of this StudentMarks
     */
    long getEnglish();
    
    /**
     * Sets the marksId of this StudentMarks. The marksId field corresponds to
     * the database column Training.public.StudentMarks.MarksID.
     * 
     * @param marksId to set of this StudentMarks
     * @return        this StudentMarks instance
     */
    StudentMarks setMarksId(long marksId);
    
    /**
     * Sets the studentId of this StudentMarks. The studentId field corresponds
     * to the database column Training.public.StudentMarks.StudentID.
     * 
     * @param studentId to set of this StudentMarks
     * @return          this StudentMarks instance
     */
    StudentMarks setStudentId(long studentId);
    
    /**
     * Sets the physics of this StudentMarks. The physics field corresponds to
     * the database column Training.public.StudentMarks.Physics.
     * 
     * @param physics to set of this StudentMarks
     * @return        this StudentMarks instance
     */
    StudentMarks setPhysics(long physics);
    
    /**
     * Sets the chemistry of this StudentMarks. The chemistry field corresponds
     * to the database column Training.public.StudentMarks.Chemistry.
     * 
     * @param chemistry to set of this StudentMarks
     * @return          this StudentMarks instance
     */
    StudentMarks setChemistry(long chemistry);
    
    /**
     * Sets the maths of this StudentMarks. The maths field corresponds to the
     * database column Training.public.StudentMarks.Maths.
     * 
     * @param maths to set of this StudentMarks
     * @return      this StudentMarks instance
     */
    StudentMarks setMaths(long maths);
    
    /**
     * Sets the english of this StudentMarks. The english field corresponds to
     * the database column Training.public.StudentMarks.English.
     * 
     * @param english to set of this StudentMarks
     * @return        this StudentMarks instance
     */
    StudentMarks setEnglish(long english);
    
    /**
     * Queries the specified manager for the referenced Student. If no such
     * Student exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Student findStudentId(Manager<Student> foreignManager);
    
    enum Identifier implements ColumnIdentifier<StudentMarks> {
        
        MARKS_ID   ("MarksID"),
        STUDENT_ID ("StudentID"),
        PHYSICS    ("Physics"),
        CHEMISTRY  ("Chemistry"),
        MATHS      ("Maths"),
        ENGLISH    ("English");
        
        private final String columnId;
        private final TableIdentifier<StudentMarks> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Training";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "StudentMarks";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<StudentMarks> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}
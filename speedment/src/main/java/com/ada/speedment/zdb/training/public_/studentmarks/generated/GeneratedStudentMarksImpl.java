package com.ada.speedment.zdb.training.public_.studentmarks.generated;

import com.ada.speedment.zdb.training.public_.student.Student;
import com.ada.speedment.zdb.training.public_.studentmarks.StudentMarks;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.ada.speedment.zdb.training.public_.studentmarks.StudentMarks}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedStudentMarksImpl implements StudentMarks {
    
    private long marksId;
    private long studentId;
    private long physics;
    private long chemistry;
    private long maths;
    private long english;
    
    protected GeneratedStudentMarksImpl() {}
    
    @Override
    public long getMarksId() {
        return marksId;
    }
    
    @Override
    public long getStudentId() {
        return studentId;
    }
    
    @Override
    public long getPhysics() {
        return physics;
    }
    
    @Override
    public long getChemistry() {
        return chemistry;
    }
    
    @Override
    public long getMaths() {
        return maths;
    }
    
    @Override
    public long getEnglish() {
        return english;
    }
    
    @Override
    public StudentMarks setMarksId(long marksId) {
        this.marksId = marksId;
        return this;
    }
    
    @Override
    public StudentMarks setStudentId(long studentId) {
        this.studentId = studentId;
        return this;
    }
    
    @Override
    public StudentMarks setPhysics(long physics) {
        this.physics = physics;
        return this;
    }
    
    @Override
    public StudentMarks setChemistry(long chemistry) {
        this.chemistry = chemistry;
        return this;
    }
    
    @Override
    public StudentMarks setMaths(long maths) {
        this.maths = maths;
        return this;
    }
    
    @Override
    public StudentMarks setEnglish(long english) {
        this.english = english;
        return this;
    }
    
    @Override
    public Student findStudentId(Manager<Student> foreignManager) {
        return foreignManager.stream().filter(Student.STUDENT_ID.equal(getStudentId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("marksId = "   + Objects.toString(getMarksId()));
        sj.add("studentId = " + Objects.toString(getStudentId()));
        sj.add("physics = "   + Objects.toString(getPhysics()));
        sj.add("chemistry = " + Objects.toString(getChemistry()));
        sj.add("maths = "     + Objects.toString(getMaths()));
        sj.add("english = "   + Objects.toString(getEnglish()));
        return "StudentMarksImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof StudentMarks)) { return false; }
        final StudentMarks thatStudentMarks = (StudentMarks)that;
        if (this.getMarksId() != thatStudentMarks.getMarksId()) { return false; }
        if (this.getStudentId() != thatStudentMarks.getStudentId()) { return false; }
        if (this.getPhysics() != thatStudentMarks.getPhysics()) { return false; }
        if (this.getChemistry() != thatStudentMarks.getChemistry()) { return false; }
        if (this.getMaths() != thatStudentMarks.getMaths()) { return false; }
        if (this.getEnglish() != thatStudentMarks.getEnglish()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getMarksId());
        hash = 31 * hash + Long.hashCode(getStudentId());
        hash = 31 * hash + Long.hashCode(getPhysics());
        hash = 31 * hash + Long.hashCode(getChemistry());
        hash = 31 * hash + Long.hashCode(getMaths());
        hash = 31 * hash + Long.hashCode(getEnglish());
        return hash;
    }
}